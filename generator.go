// +build ignore

// This program generates files used to access the UAA API. It can be invoked
// by running go generate

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"html/template"
	"io"
	"io/ioutil"
	"log"
	"reflect"
	"strings"

	uaa "github.com/cloudfoundry-community/go-uaa"
)

var typesToProcess = []interface{}{
	uaa.Client{},
	uaa.Group{},
	uaa.User{},
}

func main() {
	for _, typ := range typesToProcess {
		rtype := reflect.TypeOf(typ)
		if rtype.Kind() != reflect.Struct {
			log.Printf("[warn]: %s is not a struct type...skipping\n", rtype.Name())
			continue
		}

		typeName := rtype.Name()
		pluralTypeName := typeName + "s"

		t := typeGenerator{
			ModelTypeName:       typeName,
			ModelPluralTypeName: pluralTypeName,
			IDFieldName:         "ID",
			SupportsAttributes:  true,
		}
		if typeName == "Client" {
			t.SupportsAttributes = false
		}

		for i := 0; i < rtype.NumField(); i++ {
			field := rtype.Field(i)

			fieldTag := field.Tag.Get("generator")
			if fieldTag == "id" {
				t.IDFieldName = field.Name
			}
		}

		sourceBuf := &bytes.Buffer{}
		specBuf := &bytes.Buffer{}

		generate(sourceBuf, specBuf, t)

		if sourceBuf.Len() > 0 {
			writeFile(sourceBuf.Bytes(), strings.ToLower(fmt.Sprintf("generated_%s.go", t.ModelTypeName)))
		}
		if specBuf.Len() > 0 {
			writeFile(specBuf.Bytes(), strings.ToLower(fmt.Sprintf("generated_%s_test.go", t.ModelTypeName)))
		}
	}
}

func generate(sourceBuf io.Writer, specBuf io.Writer, t typeGenerator) {
	if err := modelTmpl.Execute(sourceBuf, t); err != nil {
		log.Fatalf("generating model code: %v", err)
	}

	if err := specTmpl.Execute(specBuf, t); err != nil {
		log.Fatalf("generating test code: %v", err)
	}
}

func writeFile(buf []byte, filename string) {
	src, err := format.Source(buf)
	if err != nil {
		log.Printf("warning: internal error: invalid Go generated: %s", err)
		log.Printf("warning: compile the package to analyze the error")
		src = buf
	}

	if err = ioutil.WriteFile(filename, src, 0644); err != nil {
		log.Fatalf("writing output [%s]: %v", filename, err)
	}
}

func tolower(s string) string {
	return strings.ToLower(s)
}

func join(s ...string) string {
	return strings.Join(s, ", ")
}

func joinfields(fields []structField, includeMetadata bool) string {
	names := make([]string, 0, len(fields))
	for i := range fields {
		names = append(names, tolower(fields[i].Name))
	}
	if includeMetadata {
		names = append(names, "metadata")
	}

	return join(names...)
}

func joinfieldsprefixlower(fields []structField, prefix string) string {
	return tolower(joinfieldsprefix(fields, prefix))
}

func joinfieldsprefix(fields []structField, prefix string) string {
	names := make([]string, 0, len(fields))
	for i := range fields {
		names = append(names, prefix+fields[i].Name)
	}

	return join(names...)
}

type structField struct {
	ModelTypeName       string // name of the parent model object
	ModelPluralTypeName string // plural name of the parent model object
	Name                string // name of the field
}

type typeGenerator struct {
	ModelTypeName       string        // the name of the model type
	ModelPluralTypeName string        // the plural of the model type
	IDFieldName         string        // the field name for the ID
	SupportsAttributes  bool          // attributes can be supplied when listing
	Fields              []structField // fields on the struct we're generating for (converted to columns)
}

var (
	mode string
)

var modelTmpl = template.Must(template.New("modelTempl").Funcs(template.FuncMap{
	"tolower": tolower,
}).Parse(modelTemplateString))

var specTmpl = template.Must(template.New("specTempl").Funcs(template.FuncMap{
	"tolower": tolower,
}).Parse(specTemplateString))

const modelTemplateString string = `// Code generated by go-uaa/generator; DO NOT EDIT.

package uaa

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// Get{{.ModelTypeName}} with the given {{tolower .ModelTypeName}}ID.
func (a *API) Get{{.ModelTypeName}}({{tolower .ModelTypeName}}ID string) (*{{.ModelTypeName}}, error) {
	u := urlWithPath(*a.TargetURL, fmt.Sprintf("%s/%s", {{.ModelPluralTypeName}}Endpoint, {{tolower .ModelTypeName}}ID))
	{{tolower .ModelTypeName}} := &{{.ModelTypeName}}{}
	err := a.doJSON(http.MethodGet, &u, nil, 	{{tolower .ModelTypeName}}, true)
	if err != nil {
		return nil, err
	}
	return 	{{tolower .ModelTypeName}}, nil
}

// Create{{.ModelTypeName}} creates the given {{tolower .ModelTypeName}}.
func (a *API) Create{{.ModelTypeName}}({{tolower .ModelTypeName}} {{.ModelTypeName}}) (*{{.ModelTypeName}}, error) {
	u := urlWithPath(*a.TargetURL, {{.ModelPluralTypeName}}Endpoint)
	created := &{{.ModelTypeName}}{}
	j, err := json.Marshal({{tolower .ModelTypeName}})
	if err != nil {
		return nil, err
	}
	err = a.doJSON(http.MethodPost, &u, bytes.NewBuffer([]byte(j)), created, true)
	if err != nil {
		return nil, err
	}
	return created, nil
}

// Update{{.ModelTypeName}} updates the given {{tolower .ModelTypeName}}.
func (a *API) Update{{.ModelTypeName}}({{tolower .ModelTypeName}} {{.ModelTypeName}}) (*{{.ModelTypeName}}, error) {
	u := urlWithPath(*a.TargetURL, {{.ModelPluralTypeName}}Endpoint)
	created := &{{.ModelTypeName}}{}
	j, err := json.Marshal({{tolower .ModelTypeName}})
	if err != nil {
		return nil, err
	}
	err = a.doJSON(http.MethodPut, &u, bytes.NewBuffer([]byte(j)), created, true)
	if err != nil {
		return nil, err
	}
	return created, nil
}

// Delete{{.ModelTypeName}} deletes the {{tolower .ModelTypeName}} with the given {{tolower .ModelTypeName}} ID.
func (a *API) Delete{{.ModelTypeName}}({{tolower .ModelTypeName}}ID string) (*{{.ModelTypeName}}, error) {
	if {{tolower .ModelTypeName}}ID == "" {
		return nil, errors.New("{{tolower .ModelTypeName}}ID cannot be blank")
	}
	u := urlWithPath(*a.TargetURL, fmt.Sprintf("%s/%s", {{.ModelPluralTypeName}}Endpoint, {{tolower .ModelTypeName}}ID))
	deleted := &{{.ModelTypeName}}{}
	err := a.doJSON(http.MethodDelete, &u, nil, deleted, true)
	if err != nil {
		return nil, err
	}
	return deleted, nil
}

// List{{.ModelPluralTypeName}} with the given filter, sortBy, attributes, sortOrder, startIndex
// (1-based), and count (default 100).
// If successful, List{{.ModelPluralTypeName}} returns the {{tolower .ModelPluralTypeName}} and the total itemsPerPage of {{tolower .ModelPluralTypeName}} for
// all pages. If unsuccessful, List{{.ModelPluralTypeName}} returns the error.
func (a *API) List{{.ModelPluralTypeName}}(filter string, sortBy string{{if .SupportsAttributes}}, attributes string{{end}}, sortOrder SortOrder, startIndex int, itemsPerPage int) ([]{{.ModelTypeName}}, Page, error) {
	u := urlWithPath(*a.TargetURL, {{.ModelPluralTypeName}}Endpoint)
	query := url.Values{}
	if filter != "" {
		query.Set("filter", filter)
	}
	{{if .SupportsAttributes}}if attributes != "" {
		query.Set("attributes", attributes)
	}
	{{end}}if sortBy != "" {
		query.Set("sortBy", sortBy)
	}
	if sortOrder != "" {
		query.Set("sortOrder", string(sortOrder))
	}
	if startIndex == 0 {
		startIndex = 1
	}
	query.Set("startIndex", strconv.Itoa(startIndex))
	if itemsPerPage == 0 {
		itemsPerPage = 100
	}
	query.Set("count", strconv.Itoa(itemsPerPage))
	u.RawQuery = query.Encode()

	{{tolower .ModelPluralTypeName}} := &paginated{{.ModelTypeName}}List{}
	err := a.doJSON(http.MethodGet, &u, nil, {{tolower .ModelPluralTypeName}}, true)
	if err != nil {
		return nil, Page{}, err
	}
	page := Page{
		StartIndex:   {{tolower .ModelPluralTypeName}}.StartIndex,
		ItemsPerPage: {{tolower .ModelPluralTypeName}}.ItemsPerPage,
		TotalResults: {{tolower .ModelPluralTypeName}}.TotalResults,
	}
	return {{tolower .ModelPluralTypeName}}.Resources, page, err
}

// ListAll{{.ModelPluralTypeName}} retrieves UAA {{tolower .ModelPluralTypeName}}
func (a *API) ListAll{{.ModelPluralTypeName}}(filter string, sortBy string{{if .SupportsAttributes}}, attributes string{{end}}, sortOrder SortOrder) ([]{{.ModelTypeName}}, error) {
	page := Page{
		StartIndex:   1,
		ItemsPerPage: 100,
	}
	var (
		results     []{{.ModelTypeName}}
		currentPage []{{.ModelTypeName}}
		err         error
	)

	for {
		currentPage, page, err = a.List{{.ModelPluralTypeName}}(filter, sortBy{{if .SupportsAttributes}}, attributes{{end}}, sortOrder, page.StartIndex, page.ItemsPerPage)
		if err != nil {
			return nil, err
		}
		results = append(results, currentPage...)

		if (page.StartIndex + page.ItemsPerPage) > page.TotalResults {
			break
		}
		page.StartIndex = page.StartIndex + page.ItemsPerPage
	}
	return results, nil
}`

const specTemplateString string = `// Code generated by go-uaa/generator; DO NOT EDIT.

package uaa_test

import (
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"net/url"
	"testing"

	uaa "github.com/cloudfoundry-community/go-uaa"
	. "github.com/onsi/gomega"
	"github.com/sclevine/spec"
	"github.com/sclevine/spec/report"
)

func Test{{.ModelTypeName}}(t *testing.T) {
	spec.Run(t, "", test{{.ModelTypeName}}, spec.Report(report.Terminal{}))
}

func test{{.ModelTypeName}}(t *testing.T, when spec.G, it spec.S) {
	var (
		s       *httptest.Server
		handler http.Handler
		called  int
		a       *uaa.API
	)

	it.Before(func() {
		RegisterTestingT(t)
		called = 0
		s = httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
			called = called + 1
			Expect(handler).NotTo(BeNil())
			handler.ServeHTTP(w, req)
		}))
		c := &http.Client{Transport: http.DefaultTransport}
		u, _ := url.Parse(s.URL)
		a = &uaa.API{
			TargetURL:             u,
			AuthenticatedClient:   c,
			UnauthenticatedClient: c,
		}
	})

	it.After(func() {
		if s != nil {
			s.Close()
		}
	})

	when("Get{{.ModelTypeName}}()", func() {
		when("the {{tolower .ModelTypeName}} is returned from the server", func() {
			it.Before(func() {
				handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
					Expect(req.Header.Get("Accept")).To(Equal("application/json"))
					Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint+"/00000000-0000-0000-0000-000000000001"))
					w.WriteHeader(http.StatusOK)
					w.Write([]byte({{tolower .ModelTypeName}}Response))
				})
			})
			it("gets the {{tolower .ModelTypeName}} from the UAA by ID", func() {
				{{tolower .ModelTypeName}}, err := a.Get{{.ModelTypeName}}("00000000-0000-0000-0000-000000000001")
				Expect(err).NotTo(HaveOccurred())
				Expect({{tolower .ModelTypeName}}.{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000001"))
			})
		})

		when("the server errors", func() {
			it.Before(func() {
				handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
					Expect(req.Header.Get("Accept")).To(Equal("application/json"))
					Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint+"/00000000-0000-0000-0000-000000000001"))
					w.WriteHeader(http.StatusInternalServerError)
				})
			})

			it("returns helpful error", func() {
				{{tolower .ModelTypeName}}, err := a.Get{{.ModelTypeName}}("00000000-0000-0000-0000-000000000001")
				Expect(err).To(HaveOccurred())
				Expect({{tolower .ModelTypeName}}).To(BeNil())
				Expect(err.Error()).To(ContainSubstring("An unknown error occurred while calling"))
			})
		})

		when("the server returns unparsable {{tolower .ModelPluralTypeName}}", func() {
			it.Before(func() {
				handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
					Expect(req.Header.Get("Accept")).To(Equal("application/json"))
					Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint+"/00000000-0000-0000-0000-000000000001"))
					w.WriteHeader(http.StatusOK)
					w.Write([]byte("{unparsable-json-response}"))
				})
			})

			it("returns helpful error", func() {
				{{tolower .ModelTypeName}}, err := a.Get{{.ModelTypeName}}("00000000-0000-0000-0000-000000000001")
				Expect(err).To(HaveOccurred())
				Expect({{tolower .ModelTypeName}}).To(BeNil())
				Expect(err.Error()).To(ContainSubstring("An unknown error occurred while parsing response from"))
				Expect(err.Error()).To(ContainSubstring("Response was {unparsable-json-response}"))
			})
		})
	})

	when("Create{{.ModelTypeName}}()", func() {
		it("performs a POST with the {{tolower .ModelTypeName}} data and returns the created {{tolower .ModelTypeName}}", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.Header.Get("Content-Type")).To(Equal("application/json"))
				Expect(req.Method).To(Equal(http.MethodPost))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				defer req.Body.Close()
				body, _ := ioutil.ReadAll(req.Body)
				Expect(body).To(MatchJSON(test{{.ModelTypeName}}JSON))
				w.WriteHeader(http.StatusCreated)
				w.Write([]byte({{tolower .ModelTypeName}}Response))
			})

			created, err := a.Create{{.ModelTypeName}}(test{{.ModelTypeName}}Value)
			Expect(called).To(Equal(1))
			Expect(err).NotTo(HaveOccurred())
			Expect(created).NotTo(BeNil())
		})

		it("returns error when response cannot be parsed", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Method).To(Equal(http.MethodPost))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte("{unparseable}"))
			})
			created, err := a.Create{{.ModelTypeName}}(test{{.ModelTypeName}}Value)
			Expect(err).To(HaveOccurred())
			Expect(created).To(BeNil())
		})

		it("returns error when response is not 200 OK", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Method).To(Equal(http.MethodPost))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				w.WriteHeader(http.StatusBadRequest)
			})
			created, err := a.Create{{.ModelTypeName}}(test{{.ModelTypeName}}Value)
			Expect(err).To(HaveOccurred())
			Expect(created).To(BeNil())
		})
	})

	when("Update{{.ModelTypeName}}()", func() {
		it("performs a PUT with the {{tolower .ModelTypeName}} data and returns the updated {{tolower .ModelTypeName}}", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.Header.Get("Content-Type")).To(Equal("application/json"))
				Expect(req.Method).To(Equal(http.MethodPut))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				defer req.Body.Close()
				body, _ := ioutil.ReadAll(req.Body)
				Expect(body).To(MatchJSON(test{{.ModelTypeName}}JSON))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte({{tolower .ModelTypeName}}Response))
			})

			updated, err := a.Update{{.ModelTypeName}}(test{{.ModelTypeName}}Value)
			Expect(called).To(Equal(1))
			Expect(err).NotTo(HaveOccurred())
			Expect(updated).NotTo(BeNil())
		})

		it("returns error when response cannot be parsed", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Method).To(Equal(http.MethodPut))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte("{unparseable}"))
			})
			updated, err := a.Update{{.ModelTypeName}}(test{{.ModelTypeName}}Value)
			Expect(err).To(HaveOccurred())
			Expect(updated).To(BeNil())
		})

		it("returns error when response is not 200 OK", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Method).To(Equal(http.MethodPut))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				w.WriteHeader(http.StatusBadRequest)
			})
			updated, err := a.Update{{.ModelTypeName}}(test{{.ModelTypeName}}Value)
			Expect(err).To(HaveOccurred())
			Expect(updated).To(BeNil())
		})
	})

	when("Delete{{.ModelTypeName}}()", func() {
		it("errors when the {{tolower .ModelTypeName}}ID is empty", func() {
			deleted, err := a.Delete{{.ModelTypeName}}("")
			Expect(called).To(Equal(0))
			Expect(err).To(HaveOccurred())
			Expect(deleted).To(BeNil())
		})

		it("performs a DELETE for the {{tolower .ModelTypeName}}", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.Method).To(Equal(http.MethodDelete))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint+"/00000000-0000-0000-0000-000000000001"))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte({{tolower .ModelTypeName}}Response))
			})

			deleted, err := a.Delete{{.ModelTypeName}}("00000000-0000-0000-0000-000000000001")
			Expect(called).To(Equal(1))
			Expect(err).NotTo(HaveOccurred())
			Expect(deleted).NotTo(BeNil())
		})

		it("returns error when response cannot be parsed", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Method).To(Equal(http.MethodDelete))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint+"/00000000-0000-0000-0000-000000000001"))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte("{unparseable}"))
			})
			deleted, err := a.Delete{{.ModelTypeName}}("00000000-0000-0000-0000-000000000001")
			Expect(err).To(HaveOccurred())
			Expect(deleted).To(BeNil())
		})

		it("returns error when response is not 200 OK", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Method).To(Equal(http.MethodDelete))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint+"/00000000-0000-0000-0000-000000000001"))
				w.WriteHeader(http.StatusBadRequest)
			})
			deleted, err := a.Delete{{.ModelTypeName}}("00000000-0000-0000-0000-000000000001")
			Expect(err).To(HaveOccurred())
			Expect(deleted).To(BeNil())
		})
	})

	when("ListAll{{.ModelPluralTypeName}}()", func() {
		it("can return multiple pages", func() {
			page1 := MultiPaginatedResponse(1, 1, 2, uaa.{{.ModelTypeName}}{ {{.IDFieldName}}: "test-{{tolower .ModelTypeName}}-1" })
			page2 := MultiPaginatedResponse(2, 1, 2, uaa.{{.ModelTypeName}}{ {{.IDFieldName}}: "test-{{tolower .ModelTypeName}}-2" })
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				w.WriteHeader(http.StatusOK)
				if called == 1 {
					Expect(req.URL.Query().Get("startIndex")).To(Equal("1"))
					Expect(req.URL.Query().Get("count")).To(Equal("100"))
					w.Write([]byte(page1))
				} else {
					Expect(req.URL.Query().Get("startIndex")).To(Equal("2"))
					Expect(req.URL.Query().Get("count")).To(Equal("1"))
					w.Write([]byte(page2))
				}
			})

			{{tolower .ModelTypeName}}s, err := a.ListAll{{.ModelPluralTypeName}}("", ""{{if .SupportsAttributes}}, ""{{end}}, "")
			Expect(err).NotTo(HaveOccurred())
			Expect({{tolower .ModelTypeName}}s[0].{{.IDFieldName}}).To(Equal("test-{{tolower .ModelTypeName}}-1"))
			Expect({{tolower .ModelTypeName}}s[1].{{.IDFieldName}}).To(Equal("test-{{tolower .ModelTypeName}}-2"))
			Expect(called).To(Equal(2))
		})

		it("returns an error when the endpoint doesn't respond", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				w.WriteHeader(http.StatusInternalServerError)
			})

			{{tolower .ModelTypeName}}s, err := a.ListAll{{.ModelPluralTypeName}}("", ""{{if .SupportsAttributes}}, ""{{end}}, "")
			Expect(err).To(HaveOccurred())
			Expect({{tolower .ModelTypeName}}s).To(BeNil())
			Expect(called).To(Equal(1))
		})
	})

	when("List{{.ModelPluralTypeName}}()", func() {
		it("can accept a filter query to limit results", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				Expect(req.URL.Query().Get("count")).To(Equal("100"))
				Expect(req.URL.Query().Get("startIndex")).To(Equal("1"))
				Expect(req.URL.Query().Get("filter")).To(Equal("id eq \"00000000-0000-0000-0000-000000000001\""))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte({{tolower .ModelTypeName}}ListResponse))
			})
			{{tolower .ModelTypeName}}List, _, err := a.List{{.ModelPluralTypeName}}("id eq \"00000000-0000-0000-0000-000000000001\"", ""{{if .SupportsAttributes}}, ""{{end}}, "", 1, 100)
			Expect(err).NotTo(HaveOccurred())
			Expect({{tolower .ModelTypeName}}List[0].{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000001"))
			Expect({{tolower .ModelTypeName}}List[1].{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000002"))
		})

		it("does not include the filter param if no filter exists", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				Expect(req.URL.Query().Get("count")).To(Equal("100"))
				Expect(req.URL.Query().Get("startIndex")).To(Equal("1"))
				Expect(req.URL.Query().Get("filter")).To(Equal(""))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte({{tolower .ModelTypeName}}ListResponse))
			})
			{{tolower .ModelTypeName}}List, _, err := a.List{{.ModelPluralTypeName}}("", ""{{if .SupportsAttributes}}, ""{{end}}, "", 1, 100)
			Expect(err).NotTo(HaveOccurred())
			Expect({{tolower .ModelTypeName}}List[0].{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000001"))
			Expect({{tolower .ModelTypeName}}List[1].{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000002"))
		})

		{{if .SupportsAttributes}}it("can accept an attributes list", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				Expect(req.URL.Query().Get("count")).To(Equal("100"))
				Expect(req.URL.Query().Get("startIndex")).To(Equal("1"))
				Expect(req.URL.Query().Get("filter")).To(Equal("id eq \"00000000-0000-0000-0000-000000000001\""))
				Expect(req.URL.Query().Get("attributes")).To(Equal("testField"))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte({{tolower .ModelTypeName}}ListResponse))
			})
			{{tolower .ModelTypeName}}List, _, err := a.List{{.ModelPluralTypeName}}("id eq \"00000000-0000-0000-0000-000000000001\"", "", "testField", "", 1, 100)
			Expect(err).NotTo(HaveOccurred())
			Expect({{tolower .ModelTypeName}}List[0].{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000001"))
			Expect({{tolower .ModelTypeName}}List[1].{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000002"))
		})

		{{end}}it("can accept sortBy", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				Expect(req.URL.Query().Get("count")).To(Equal("100"))
				Expect(req.URL.Query().Get("startIndex")).To(Equal("1"))
				Expect(req.URL.Query().Get("filter")).To(Equal(""))
				Expect(req.URL.Query().Get("sortBy")).To(Equal("testField"))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte({{tolower .ModelTypeName}}ListResponse))
			})
			{{tolower .ModelTypeName}}List, _, err := a.List{{.ModelPluralTypeName}}("", "testField"{{if .SupportsAttributes}}, ""{{end}}, "", 1, 100)
			Expect(err).NotTo(HaveOccurred())
			Expect({{tolower .ModelTypeName}}List[0].{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000001"))
			Expect({{tolower .ModelTypeName}}List[1].{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000002"))
		})

		it("can accept sort order ascending/descending", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				Expect(req.URL.Query().Get("count")).To(Equal("100"))
				Expect(req.URL.Query().Get("startIndex")).To(Equal("1"))
				Expect(req.URL.Query().Get("filter")).To(Equal(""))
				Expect(req.URL.Query().Get("sortBy")).To(Equal(""))
				Expect(req.URL.Query().Get("sortOrder")).To(Equal("ascending"))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte({{tolower .ModelTypeName}}ListResponse))
			})
			{{tolower .ModelTypeName}}List, _, err := a.List{{.ModelPluralTypeName}}("", ""{{if .SupportsAttributes}}, ""{{end}}, uaa.SortAscending, 1, 100)
			Expect(err).NotTo(HaveOccurred())
			Expect({{tolower .ModelTypeName}}List[0].{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000001"))
			Expect({{tolower .ModelTypeName}}List[1].{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000002"))
		})

		it("uses a startIndex of 1 if 0 is supplied", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				Expect(req.URL.Query().Get("count")).To(Equal("100"))
				Expect(req.URL.Query().Get("startIndex")).To(Equal("1"))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte({{tolower .ModelTypeName}}ListResponse))
			})
			{{tolower .ModelTypeName}}List, _, err := a.List{{.ModelPluralTypeName}}("", ""{{if .SupportsAttributes}}, ""{{end}}, "", 0, 0)
			Expect(err).NotTo(HaveOccurred())
			Expect({{tolower .ModelTypeName}}List[0].{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000001"))
			Expect({{tolower .ModelTypeName}}List[1].{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000002"))
		})

		it("returns an error when the endpoint doesn't respond", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				Expect(req.URL.Query().Get("count")).To(Equal("100"))
				Expect(req.URL.Query().Get("startIndex")).To(Equal("1"))
				Expect(req.URL.Query().Get("filter")).To(Equal("id eq \"00000000-0000-0000-0000-000000000001\""))
				w.WriteHeader(http.StatusInternalServerError)
			})

			{{tolower .ModelTypeName}}List, _, err := a.List{{.ModelPluralTypeName}}("id eq \"00000000-0000-0000-0000-000000000001\"", ""{{if .SupportsAttributes}}, ""{{end}}, "", 1, 100)
			Expect(err).To(HaveOccurred())
			Expect({{tolower .ModelTypeName}}List).To(BeNil())
		})

		it("returns an error when response is unparseable", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				Expect(req.URL.Query().Get("count")).To(Equal("100"))
				Expect(req.URL.Query().Get("startIndex")).To(Equal("1"))
				Expect(req.URL.Query().Get("filter")).To(Equal("id eq \"00000000-0000-0000-0000-000000000001\""))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte("{unparsable}"))
			})
			{{tolower .ModelTypeName}}List, _, err := a.List{{.ModelPluralTypeName}}("id eq \"00000000-0000-0000-0000-000000000001\"", ""{{if .SupportsAttributes}}, ""{{end}}, "", 1, 100)
			Expect(err).To(HaveOccurred())
			Expect({{tolower .ModelTypeName}}List).To(BeNil())
		})
	})
}`
