// Code generated by go-uaa/generator; DO NOT EDIT.

package uaa_test

import (
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"net/url"
	"testing"

	uaa "github.com/cloudfoundry-community/go-uaa"
	. "github.com/onsi/gomega"
	"github.com/sclevine/spec"
)

func test{{.ModelTypeName}}(t *testing.T, when spec.G, it spec.S) {
	var (
		s       *httptest.Server
		handler http.Handler
		called  int
		a       *uaa.API
	)

	it.Before(func() {
		RegisterTestingT(t)
		called = 0
		s = httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
			called = called + 1
			Expect(handler).NotTo(BeNil())
			handler.ServeHTTP(w, req)
		}))
		c := &http.Client{Transport: http.DefaultTransport}
		u, _ := url.Parse(s.URL)
		a = &uaa.API{
			TargetURL:             u,
			AuthenticatedClient:   c,
			UnauthenticatedClient: c,
		}
	})

	it.After(func() {
		if s != nil {
			s.Close()
		}
	})

	when("Get{{.ModelTypeName}}()", func() {
		when("the {{tolower .ModelTypeName}} is returned from the server", func() {
			it.Before(func() {
				handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
					Expect(req.Header.Get("Accept")).To(Equal("application/json"))
					Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint+"/00000000-0000-0000-0000-000000000001"))
					w.WriteHeader(http.StatusOK)
					w.Write([]byte({{tolower .ModelTypeName}}Response))
				})
			})
			it("gets the {{tolower .ModelTypeName}} from the UAA by ID", func() {
				{{tolower .ModelTypeName}}, err := a.Get{{.ModelTypeName}}("00000000-0000-0000-0000-000000000001")
				Expect(err).NotTo(HaveOccurred())
				Expect({{tolower .ModelTypeName}}.{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000001"))
			})
		})

		when("the server errors", func() {
			it.Before(func() {
				handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
					Expect(req.Header.Get("Accept")).To(Equal("application/json"))
					Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint+"/00000000-0000-0000-0000-000000000001"))
					w.WriteHeader(http.StatusInternalServerError)
				})
			})

			it("returns helpful error", func() {
				{{tolower .ModelTypeName}}, err := a.Get{{.ModelTypeName}}("00000000-0000-0000-0000-000000000001")
				Expect(err).To(HaveOccurred())
				Expect({{tolower .ModelTypeName}}).To(BeNil())
				Expect(err.Error()).To(ContainSubstring("An unknown error occurred while calling"))
			})
		})

		when("the server returns unparsable {{tolower .ModelPluralTypeName}}", func() {
			it.Before(func() {
				handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
					Expect(req.Header.Get("Accept")).To(Equal("application/json"))
					Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint+"/00000000-0000-0000-0000-000000000001"))
					w.WriteHeader(http.StatusOK)
					w.Write([]byte("{unparsable-json-response}"))
				})
			})

			it("returns helpful error", func() {
				{{tolower .ModelTypeName}}, err := a.Get{{.ModelTypeName}}("00000000-0000-0000-0000-000000000001")
				Expect(err).To(HaveOccurred())
				Expect({{tolower .ModelTypeName}}).To(BeNil())
				Expect(err.Error()).To(ContainSubstring("An unknown error occurred while parsing response from"))
				Expect(err.Error()).To(ContainSubstring("Response was {unparsable-json-response}"))
			})
		})
	})

	when("Create{{.ModelTypeName}}()", func() {
		it("performs a POST with the {{tolower .ModelTypeName}} data and returns the created {{tolower .ModelTypeName}}", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.Header.Get("Content-Type")).To(Equal("application/json"))
				Expect(req.Method).To(Equal(http.MethodPost))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				defer req.Body.Close()
				body, _ := ioutil.ReadAll(req.Body)
				Expect(body).To(MatchJSON(test{{.ModelTypeName}}JSON))
				w.WriteHeader(http.StatusCreated)
				w.Write([]byte({{tolower .ModelTypeName}}Response))
			})

			created, err := a.Create{{.ModelTypeName}}(test{{.ModelTypeName}}Value)
			Expect(called).To(Equal(1))
			Expect(err).NotTo(HaveOccurred())
			Expect(created).NotTo(BeNil())
		})

		it("returns error when response cannot be parsed", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Method).To(Equal(http.MethodPost))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte("{unparseable}"))
			})
			created, err := a.Create{{.ModelTypeName}}(test{{.ModelTypeName}}Value)
			Expect(err).To(HaveOccurred())
			Expect(created).To(BeNil())
		})

		it("returns error when response is not 200 OK", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Method).To(Equal(http.MethodPost))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				w.WriteHeader(http.StatusBadRequest)
			})
			created, err := a.Create{{.ModelTypeName}}(test{{.ModelTypeName}}Value)
			Expect(err).To(HaveOccurred())
			Expect(created).To(BeNil())
		})
	})

	when("Update{{.ModelTypeName}}()", func() {
		it("performs a PUT with the {{tolower .ModelTypeName}} data and returns the updated {{tolower .ModelTypeName}}", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.Header.Get("Content-Type")).To(Equal("application/json"))
				Expect(req.Method).To(Equal(http.MethodPut))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint+"/00000000-0000-0000-0000-000000000001"))
				defer req.Body.Close()
				body, _ := ioutil.ReadAll(req.Body)
				Expect(body).To(MatchJSON(test{{.ModelTypeName}}JSON))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte({{tolower .ModelTypeName}}Response))
			})

			updated, err := a.Update{{.ModelTypeName}}(test{{.ModelTypeName}}Value)
			Expect(called).To(Equal(1))
			Expect(err).NotTo(HaveOccurred())
			Expect(updated).NotTo(BeNil())
		})

		it("returns error when response cannot be parsed", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Method).To(Equal(http.MethodPut))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint+"/00000000-0000-0000-0000-000000000001"))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte("{unparseable}"))
			})
			updated, err := a.Update{{.ModelTypeName}}(test{{.ModelTypeName}}Value)
			Expect(err).To(HaveOccurred())
			Expect(updated).To(BeNil())
		})

		it("returns error when response is not 200 OK", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Method).To(Equal(http.MethodPut))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint+"/00000000-0000-0000-0000-000000000001"))
				w.WriteHeader(http.StatusBadRequest)
			})
			updated, err := a.Update{{.ModelTypeName}}(test{{.ModelTypeName}}Value)
			Expect(err).To(HaveOccurred())
			Expect(updated).To(BeNil())
		})
	})

	when("Delete{{.ModelTypeName}}()", func() {
		it("errors when the {{tolower .ModelTypeName}}ID is empty", func() {
			deleted, err := a.Delete{{.ModelTypeName}}("")
			Expect(called).To(Equal(0))
			Expect(err).To(HaveOccurred())
			Expect(deleted).To(BeNil())
		})

		it("performs a DELETE for the {{tolower .ModelTypeName}}", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.Method).To(Equal(http.MethodDelete))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint+"/00000000-0000-0000-0000-000000000001"))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte({{tolower .ModelTypeName}}Response))
			})

			deleted, err := a.Delete{{.ModelTypeName}}("00000000-0000-0000-0000-000000000001")
			Expect(called).To(Equal(1))
			Expect(err).NotTo(HaveOccurred())
			Expect(deleted).NotTo(BeNil())
		})

		it("returns error when response cannot be parsed", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Method).To(Equal(http.MethodDelete))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint+"/00000000-0000-0000-0000-000000000001"))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte("{unparseable}"))
			})
			deleted, err := a.Delete{{.ModelTypeName}}("00000000-0000-0000-0000-000000000001")
			Expect(err).To(HaveOccurred())
			Expect(deleted).To(BeNil())
		})

		it("returns error when response is not 200 OK", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Method).To(Equal(http.MethodDelete))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint+"/00000000-0000-0000-0000-000000000001"))
				w.WriteHeader(http.StatusBadRequest)
			})
			deleted, err := a.Delete{{.ModelTypeName}}("00000000-0000-0000-0000-000000000001")
			Expect(err).To(HaveOccurred())
			Expect(deleted).To(BeNil())
		})
	})

	{{if .SupportsPaging}}when("ListAll{{.ModelPluralTypeName}}()", func() {
		it("can return multiple pages", func() {
			page1 := MultiPaginatedResponse(1, 1, 2, uaa.{{.ModelTypeName}}{ {{.IDFieldName}}: "test-{{tolower .ModelTypeName}}-1" })
			page2 := MultiPaginatedResponse(2, 1, 2, uaa.{{.ModelTypeName}}{ {{.IDFieldName}}: "test-{{tolower .ModelTypeName}}-2" })
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				w.WriteHeader(http.StatusOK)
				if called == 1 {
					Expect(req.URL.Query().Get("startIndex")).To(Equal("1"))
					Expect(req.URL.Query().Get("count")).To(Equal("100"))
					w.Write([]byte(page1))
				} else {
					Expect(req.URL.Query().Get("startIndex")).To(Equal("2"))
					Expect(req.URL.Query().Get("count")).To(Equal("1"))
					w.Write([]byte(page2))
				}
			})

			{{tolower .ModelTypeName}}s, err := a.ListAll{{.ModelPluralTypeName}}("", ""{{if .SupportsAttributes}}, ""{{end}}, "")
			Expect(err).NotTo(HaveOccurred())
			Expect({{tolower .ModelTypeName}}s[0].{{.IDFieldName}}).To(Equal("test-{{tolower .ModelTypeName}}-1"))
			Expect({{tolower .ModelTypeName}}s[1].{{.IDFieldName}}).To(Equal("test-{{tolower .ModelTypeName}}-2"))
			Expect(called).To(Equal(2))
		})

		it("returns an error when the endpoint doesn't respond", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				w.WriteHeader(http.StatusInternalServerError)
			})

			{{tolower .ModelTypeName}}s, err := a.ListAll{{.ModelPluralTypeName}}("", ""{{if .SupportsAttributes}}, ""{{end}}, "")
			Expect(err).To(HaveOccurred())
			Expect({{tolower .ModelTypeName}}s).To(BeNil())
			Expect(called).To(Equal(1))
		})
	})

	when("List{{.ModelPluralTypeName}}()", func() {
		it("can accept a filter query to limit results", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				Expect(req.URL.Query().Get("count")).To(Equal("100"))
				Expect(req.URL.Query().Get("startIndex")).To(Equal("1"))
				Expect(req.URL.Query().Get("filter")).To(Equal("id eq \"00000000-0000-0000-0000-000000000001\""))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte({{tolower .ModelTypeName}}ListResponse))
			})
			{{tolower .ModelTypeName}}List, _, err := a.List{{.ModelPluralTypeName}}("id eq \"00000000-0000-0000-0000-000000000001\"", ""{{if .SupportsAttributes}}, ""{{end}}, "", 1, 100)
			Expect(err).NotTo(HaveOccurred())
			Expect({{tolower .ModelTypeName}}List[0].{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000001"))
			Expect({{tolower .ModelTypeName}}List[1].{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000002"))
		})

		it("does not include the filter param if no filter exists", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				Expect(req.URL.Query().Get("count")).To(Equal("100"))
				Expect(req.URL.Query().Get("startIndex")).To(Equal("1"))
				Expect(req.URL.Query().Get("filter")).To(Equal(""))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte({{tolower .ModelTypeName}}ListResponse))
			})
			{{tolower .ModelTypeName}}List, _, err := a.List{{.ModelPluralTypeName}}("", ""{{if .SupportsAttributes}}, ""{{end}}, "", 1, 100)
			Expect(err).NotTo(HaveOccurred())
			Expect({{tolower .ModelTypeName}}List[0].{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000001"))
			Expect({{tolower .ModelTypeName}}List[1].{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000002"))
		})

		{{if .SupportsAttributes}}it("can accept an attributes list", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				Expect(req.URL.Query().Get("count")).To(Equal("100"))
				Expect(req.URL.Query().Get("startIndex")).To(Equal("1"))
				Expect(req.URL.Query().Get("filter")).To(Equal("id eq \"00000000-0000-0000-0000-000000000001\""))
				Expect(req.URL.Query().Get("attributes")).To(Equal("testField"))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte({{tolower .ModelTypeName}}ListResponse))
			})
			{{tolower .ModelTypeName}}List, _, err := a.List{{.ModelPluralTypeName}}("id eq \"00000000-0000-0000-0000-000000000001\"", "", "testField", "", 1, 100)
			Expect(err).NotTo(HaveOccurred())
			Expect({{tolower .ModelTypeName}}List[0].{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000001"))
			Expect({{tolower .ModelTypeName}}List[1].{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000002"))
		})

		{{end}}it("can accept sortBy", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				Expect(req.URL.Query().Get("count")).To(Equal("100"))
				Expect(req.URL.Query().Get("startIndex")).To(Equal("1"))
				Expect(req.URL.Query().Get("filter")).To(Equal(""))
				Expect(req.URL.Query().Get("sortBy")).To(Equal("testField"))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte({{tolower .ModelTypeName}}ListResponse))
			})
			{{tolower .ModelTypeName}}List, _, err := a.List{{.ModelPluralTypeName}}("", "testField"{{if .SupportsAttributes}}, ""{{end}}, "", 1, 100)
			Expect(err).NotTo(HaveOccurred())
			Expect({{tolower .ModelTypeName}}List[0].{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000001"))
			Expect({{tolower .ModelTypeName}}List[1].{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000002"))
		})

		it("can accept sort order ascending/descending", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				Expect(req.URL.Query().Get("count")).To(Equal("100"))
				Expect(req.URL.Query().Get("startIndex")).To(Equal("1"))
				Expect(req.URL.Query().Get("filter")).To(Equal(""))
				Expect(req.URL.Query().Get("sortBy")).To(Equal(""))
				Expect(req.URL.Query().Get("sortOrder")).To(Equal("ascending"))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte({{tolower .ModelTypeName}}ListResponse))
			})
			{{tolower .ModelTypeName}}List, _, err := a.List{{.ModelPluralTypeName}}("", ""{{if .SupportsAttributes}}, ""{{end}}, uaa.SortAscending, 1, 100)
			Expect(err).NotTo(HaveOccurred())
			Expect({{tolower .ModelTypeName}}List[0].{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000001"))
			Expect({{tolower .ModelTypeName}}List[1].{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000002"))
		})

		it("uses a startIndex of 1 if 0 is supplied", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				Expect(req.URL.Query().Get("count")).To(Equal("100"))
				Expect(req.URL.Query().Get("startIndex")).To(Equal("1"))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte({{tolower .ModelTypeName}}ListResponse))
			})
			{{tolower .ModelTypeName}}List, _, err := a.List{{.ModelPluralTypeName}}("", ""{{if .SupportsAttributes}}, ""{{end}}, "", 0, 0)
			Expect(err).NotTo(HaveOccurred())
			Expect({{tolower .ModelTypeName}}List[0].{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000001"))
			Expect({{tolower .ModelTypeName}}List[1].{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000002"))
		})

		it("returns an error when the endpoint doesn't respond", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				Expect(req.URL.Query().Get("count")).To(Equal("100"))
				Expect(req.URL.Query().Get("startIndex")).To(Equal("1"))
				Expect(req.URL.Query().Get("filter")).To(Equal("id eq \"00000000-0000-0000-0000-000000000001\""))
				w.WriteHeader(http.StatusInternalServerError)
			})

			{{tolower .ModelTypeName}}List, _, err := a.List{{.ModelPluralTypeName}}("id eq \"00000000-0000-0000-0000-000000000001\"", ""{{if .SupportsAttributes}}, ""{{end}}, "", 1, 100)
			Expect(err).To(HaveOccurred())
			Expect({{tolower .ModelTypeName}}List).To(BeNil())
		})

		it("returns an error when response is unparseable", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				Expect(req.URL.Query().Get("count")).To(Equal("100"))
				Expect(req.URL.Query().Get("startIndex")).To(Equal("1"))
				Expect(req.URL.Query().Get("filter")).To(Equal("id eq \"00000000-0000-0000-0000-000000000001\""))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte("{unparsable}"))
			})
			{{tolower .ModelTypeName}}List, _, err := a.List{{.ModelPluralTypeName}}("id eq \"00000000-0000-0000-0000-000000000001\"", ""{{if .SupportsAttributes}}, ""{{end}}, "", 1, 100)
			Expect(err).To(HaveOccurred())
			Expect({{tolower .ModelTypeName}}List).To(BeNil())
		})
	}){{else}}when("List{{.ModelPluralTypeName}}()", func() {
		it("can accept a filter query to limit results", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte({{tolower .ModelTypeName}}ListResponse))
			})
			{{tolower .ModelTypeName}}List, err := a.List{{.ModelPluralTypeName}}()
			Expect(err).NotTo(HaveOccurred())
			Expect({{tolower .ModelTypeName}}List[0].{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000001"))
			Expect({{tolower .ModelTypeName}}List[1].{{.IDFieldName}}).To(Equal("00000000-0000-0000-0000-000000000002"))
		})

		it("returns an error when the endpoint doesn't respond", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				w.WriteHeader(http.StatusInternalServerError)
			})

			{{tolower .ModelTypeName}}List, err := a.List{{.ModelPluralTypeName}}()
			Expect(err).To(HaveOccurred())
			Expect({{tolower .ModelTypeName}}List).To(BeNil())
		})

		it("returns an error when response is unparseable", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.URL.Path).To(Equal(uaa.{{.ModelPluralTypeName}}Endpoint))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte("{unparsable}"))
			})
			{{tolower .ModelTypeName}}List, err := a.List{{.ModelPluralTypeName}}()
			Expect(err).To(HaveOccurred())
			Expect({{tolower .ModelTypeName}}List).To(BeNil())
		})
	}){{end}}
}
