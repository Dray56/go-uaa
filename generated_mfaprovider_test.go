// Code generated by go-uaa/generator; DO NOT EDIT.

package uaa_test

import (
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"net/url"
	"testing"

	uaa "github.com/cloudfoundry-community/go-uaa"
	. "github.com/onsi/gomega"
	"github.com/sclevine/spec"
)

func testMFAProvider(t *testing.T, when spec.G, it spec.S) {
	var (
		s       *httptest.Server
		handler http.Handler
		called  int
		a       *uaa.API
	)

	it.Before(func() {
		RegisterTestingT(t)
		called = 0
		s = httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
			called = called + 1
			Expect(handler).NotTo(BeNil())
			handler.ServeHTTP(w, req)
		}))
		c := &http.Client{Transport: http.DefaultTransport}
		u, _ := url.Parse(s.URL)
		a = &uaa.API{
			TargetURL:             u,
			AuthenticatedClient:   c,
			UnauthenticatedClient: c,
		}
	})

	it.After(func() {
		if s != nil {
			s.Close()
		}
	})

	when("GetMFAProvider()", func() {
		when("the mfaprovider is returned from the server", func() {
			it.Before(func() {
				handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
					Expect(req.Header.Get("Accept")).To(Equal("application/json"))
					Expect(req.URL.Path).To(Equal(uaa.MFAProvidersEndpoint + "/00000000-0000-0000-0000-000000000001"))
					w.WriteHeader(http.StatusOK)
					w.Write([]byte(mfaproviderResponse))
				})
			})
			it("gets the mfaprovider from the UAA by ID", func() {
				mfaprovider, err := a.GetMFAProvider("00000000-0000-0000-0000-000000000001")
				Expect(err).NotTo(HaveOccurred())
				Expect(mfaprovider.ID).To(Equal("00000000-0000-0000-0000-000000000001"))
			})
		})

		when("the server errors", func() {
			it.Before(func() {
				handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
					Expect(req.Header.Get("Accept")).To(Equal("application/json"))
					Expect(req.URL.Path).To(Equal(uaa.MFAProvidersEndpoint + "/00000000-0000-0000-0000-000000000001"))
					w.WriteHeader(http.StatusInternalServerError)
				})
			})

			it("returns helpful error", func() {
				mfaprovider, err := a.GetMFAProvider("00000000-0000-0000-0000-000000000001")
				Expect(err).To(HaveOccurred())
				Expect(mfaprovider).To(BeNil())
				Expect(err.Error()).To(ContainSubstring("An unknown error occurred while calling"))
			})
		})

		when("the server returns unparsable mfaproviders", func() {
			it.Before(func() {
				handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
					Expect(req.Header.Get("Accept")).To(Equal("application/json"))
					Expect(req.URL.Path).To(Equal(uaa.MFAProvidersEndpoint + "/00000000-0000-0000-0000-000000000001"))
					w.WriteHeader(http.StatusOK)
					w.Write([]byte("{unparsable-json-response}"))
				})
			})

			it("returns helpful error", func() {
				mfaprovider, err := a.GetMFAProvider("00000000-0000-0000-0000-000000000001")
				Expect(err).To(HaveOccurred())
				Expect(mfaprovider).To(BeNil())
				Expect(err.Error()).To(ContainSubstring("An unknown error occurred while parsing response from"))
				Expect(err.Error()).To(ContainSubstring("Response was {unparsable-json-response}"))
			})
		})
	})

	when("CreateMFAProvider()", func() {
		it("performs a POST with the mfaprovider data and returns the created mfaprovider", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.Header.Get("Content-Type")).To(Equal("application/json"))
				Expect(req.Method).To(Equal(http.MethodPost))
				Expect(req.URL.Path).To(Equal(uaa.MFAProvidersEndpoint))
				defer req.Body.Close()
				body, _ := ioutil.ReadAll(req.Body)
				Expect(body).To(MatchJSON(testMFAProviderJSON))
				w.WriteHeader(http.StatusCreated)
				w.Write([]byte(mfaproviderResponse))
			})

			created, err := a.CreateMFAProvider(testMFAProviderValue)
			Expect(called).To(Equal(1))
			Expect(err).NotTo(HaveOccurred())
			Expect(created).NotTo(BeNil())
		})

		it("returns error when response cannot be parsed", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Method).To(Equal(http.MethodPost))
				Expect(req.URL.Path).To(Equal(uaa.MFAProvidersEndpoint))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte("{unparseable}"))
			})
			created, err := a.CreateMFAProvider(testMFAProviderValue)
			Expect(err).To(HaveOccurred())
			Expect(created).To(BeNil())
		})

		it("returns error when response is not 200 OK", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Method).To(Equal(http.MethodPost))
				Expect(req.URL.Path).To(Equal(uaa.MFAProvidersEndpoint))
				w.WriteHeader(http.StatusBadRequest)
			})
			created, err := a.CreateMFAProvider(testMFAProviderValue)
			Expect(err).To(HaveOccurred())
			Expect(created).To(BeNil())
		})
	})

	when("UpdateMFAProvider()", func() {
		it("performs a PUT with the mfaprovider data and returns the updated mfaprovider", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.Header.Get("Content-Type")).To(Equal("application/json"))
				Expect(req.Method).To(Equal(http.MethodPut))
				Expect(req.URL.Path).To(Equal(uaa.MFAProvidersEndpoint + "/00000000-0000-0000-0000-000000000001"))
				defer req.Body.Close()
				body, _ := ioutil.ReadAll(req.Body)
				Expect(body).To(MatchJSON(testMFAProviderJSON))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte(mfaproviderResponse))
			})

			updated, err := a.UpdateMFAProvider(testMFAProviderValue)
			Expect(called).To(Equal(1))
			Expect(err).NotTo(HaveOccurred())
			Expect(updated).NotTo(BeNil())
		})

		it("returns error when response cannot be parsed", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Method).To(Equal(http.MethodPut))
				Expect(req.URL.Path).To(Equal(uaa.MFAProvidersEndpoint + "/00000000-0000-0000-0000-000000000001"))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte("{unparseable}"))
			})
			updated, err := a.UpdateMFAProvider(testMFAProviderValue)
			Expect(err).To(HaveOccurred())
			Expect(updated).To(BeNil())
		})

		it("returns error when response is not 200 OK", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Method).To(Equal(http.MethodPut))
				Expect(req.URL.Path).To(Equal(uaa.MFAProvidersEndpoint + "/00000000-0000-0000-0000-000000000001"))
				w.WriteHeader(http.StatusBadRequest)
			})
			updated, err := a.UpdateMFAProvider(testMFAProviderValue)
			Expect(err).To(HaveOccurred())
			Expect(updated).To(BeNil())
		})
	})

	when("DeleteMFAProvider()", func() {
		it("errors when the mfaproviderID is empty", func() {
			deleted, err := a.DeleteMFAProvider("")
			Expect(called).To(Equal(0))
			Expect(err).To(HaveOccurred())
			Expect(deleted).To(BeNil())
		})

		it("performs a DELETE for the mfaprovider", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.Method).To(Equal(http.MethodDelete))
				Expect(req.URL.Path).To(Equal(uaa.MFAProvidersEndpoint + "/00000000-0000-0000-0000-000000000001"))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte(mfaproviderResponse))
			})

			deleted, err := a.DeleteMFAProvider("00000000-0000-0000-0000-000000000001")
			Expect(called).To(Equal(1))
			Expect(err).NotTo(HaveOccurred())
			Expect(deleted).NotTo(BeNil())
		})

		it("returns error when response cannot be parsed", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Method).To(Equal(http.MethodDelete))
				Expect(req.URL.Path).To(Equal(uaa.MFAProvidersEndpoint + "/00000000-0000-0000-0000-000000000001"))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte("{unparseable}"))
			})
			deleted, err := a.DeleteMFAProvider("00000000-0000-0000-0000-000000000001")
			Expect(err).To(HaveOccurred())
			Expect(deleted).To(BeNil())
		})

		it("returns error when response is not 200 OK", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Method).To(Equal(http.MethodDelete))
				Expect(req.URL.Path).To(Equal(uaa.MFAProvidersEndpoint + "/00000000-0000-0000-0000-000000000001"))
				w.WriteHeader(http.StatusBadRequest)
			})
			deleted, err := a.DeleteMFAProvider("00000000-0000-0000-0000-000000000001")
			Expect(err).To(HaveOccurred())
			Expect(deleted).To(BeNil())
		})
	})

	when("ListMFAProviders()", func() {
		it("can accept a filter query to limit results", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.URL.Path).To(Equal(uaa.MFAProvidersEndpoint))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte(mfaproviderListResponse))
			})
			mfaproviderList, err := a.ListMFAProviders()
			Expect(err).NotTo(HaveOccurred())
			Expect(mfaproviderList[0].ID).To(Equal("00000000-0000-0000-0000-000000000001"))
			Expect(mfaproviderList[1].ID).To(Equal("00000000-0000-0000-0000-000000000002"))
		})

		it("returns an error when the endpoint doesn't respond", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.URL.Path).To(Equal(uaa.MFAProvidersEndpoint))
				w.WriteHeader(http.StatusInternalServerError)
			})

			mfaproviderList, err := a.ListMFAProviders()
			Expect(err).To(HaveOccurred())
			Expect(mfaproviderList).To(BeNil())
		})

		it("returns an error when response is unparseable", func() {
			handler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
				Expect(req.Header.Get("Accept")).To(Equal("application/json"))
				Expect(req.URL.Path).To(Equal(uaa.MFAProvidersEndpoint))
				w.WriteHeader(http.StatusOK)
				w.Write([]byte("{unparsable}"))
			})
			mfaproviderList, err := a.ListMFAProviders()
			Expect(err).To(HaveOccurred())
			Expect(mfaproviderList).To(BeNil())
		})
	})
}
